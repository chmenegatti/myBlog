import { useState, useEffect, useRef } from 'react';
import {
  Container,
  Paper,
  TextField,
  Button,
  Box,
  Typography,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Alert,
  Grid,
  CircularProgress,
  Card,
  CardMedia,
  IconButton,
  Chip,
  Stack,
  Tabs,
  Tab,
  Divider,
  LinearProgress,
  Tooltip,
  Switch,
  FormControlLabel,
} from '@mui/material';
import {
  Save as SaveIcon,
  Preview as PreviewIcon,
  Upload as UploadIcon,
  Delete as DeleteIcon,
  Visibility as VisibilityIcon,
  Edit as EditIcon,
  Schedule as ScheduleIcon,
  AutoAwesome as AutoAwesomeIcon,
  WordCount as WordCountIcon,
} from '@mui/icons-material';
import { useNavigate, useParams } from 'react-router-dom';
import { Helmet } from 'react-helmet-async';
import MDEditor from '@uiw/react-md-editor';
import { postsService } from '../services/posts';
import { imageService } from '../services/image';
import '../styles/editor.css';

const PostEditor = () => {
  const [post, setPost] = useState({
    id: '',
    title: '',
    slug: '',
    excerpt: '',
    content: '',
    status: 'draft',
    category: '',
    tags: '',
    featured_img: '',
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [uploading, setUploading] = useState(false);
  const [activeTab, setActiveTab] = useState(0);
  const [editorMode, setEditorMode] = useState('edit');
  const [wordCount, setWordCount] = useState(0);
  const [readingTime, setReadingTime] = useState(0);
  const [autoSave, setAutoSave] = useState(true);
  const [lastSaved, setLastSaved] = useState(null);
  const fileInputRef = useRef(null);
  const autoSaveTimer = useRef(null);

  const navigate = useNavigate();
  const { id } = useParams();
  const isEdit = Boolean(id);

  useEffect(() => {
    const loadPost = async () => {
      try {
        setLoading(true);
        console.log('Loading post with ID:', id);
        console.log('Current token:', localStorage.getItem('token'));
        const response = await postsService.getPostById(id);
        console.log('getPostById response:', response);
        console.log('response.data:', response.data);

        if (response.data) {
          setPost(response.data);
          const words = calculateWordCount(response.data.content);
          setWordCount(words);
          setReadingTime(calculateReadingTime(words));
          console.log('Post set successfully:', response.data);
        } else {
          console.error('No data in response:', response);
          setError('No post data received');
        }
      } catch (error) {
        setError('Failed to load post');
        console.error('Error loading post:', error);
      } finally {
        setLoading(false);
      }
    };

    if (isEdit) {
      console.log('isEdit is true, loading post...');
      loadPost();
    } else {
      console.log('isEdit is false, not loading post');
    }
  }, [id, isEdit]);

  const generateSlug = title => {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/(^-|-$)/g, '');
  };

  const calculateWordCount = content => {
    if (!content) return 0;
    const text = content.replace(/[#*`_~]/g, '').trim();
    return text ? text.split(/\s+/).length : 0;
  };

  const calculateReadingTime = wordCount => {
    // Average reading speed: 200 words per minute
    return Math.ceil(wordCount / 200);
  };

  const autoSavePost = async () => {
    if (!isEdit || !post.title.trim()) return;
    
    try {
      const postData = { ...post, status: 'draft' };
      await postsService.updatePost(id, postData);
      setLastSaved(new Date());
    } catch (error) {
      console.error('Auto-save failed:', error);
    }
  };

  const handleFieldChange = (field, value) => {
    setPost(prev => {
      const updated = {
        ...prev,
        [field]: value,
        ...(field === 'title' && !isEdit && { slug: generateSlug(value) }),
      };
      
      // Update word count and reading time when content changes
      if (field === 'content') {
        const words = calculateWordCount(value);
        setWordCount(words);
        setReadingTime(calculateReadingTime(words));
      }
      
      return updated;
    });

    // Auto-save after 2 seconds of inactivity
    if (autoSave && isEdit) {
      if (autoSaveTimer.current) {
        clearTimeout(autoSaveTimer.current);
      }
      autoSaveTimer.current = setTimeout(autoSavePost, 2000);
    }
  };

  const handleImageUpload = async event => {
    const file = event.target.files[0];
    if (!file) return;

    // Check file type
    if (!file.type.startsWith('image/')) {
      setError('Please select an image file');
      return;
    }

    // Check file size (5MB limit)
    if (file.size > 5 * 1024 * 1024) {
      setError('Image size must be less than 5MB');
      return;
    }

    setUploading(true);
    setError('');

    try {
      const response = await imageService.uploadImage(file, 'Featured image');
      setPost(prev => ({
        ...prev,
        featured_img: response.url,
      }));
      setSuccess('Image uploaded successfully!');
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to upload image');
    } finally {
      setUploading(false);
    }
  };

  const handleRemoveImage = () => {
    setPost(prev => ({
      ...prev,
      featured_img: '',
    }));
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const handleSubmit = async status => {
    setError('');
    setSuccess('');
    setLoading(true);

    try {
      const postData = { ...post, status };
      console.log('Sending post data:', postData);

      if (isEdit) {
        await postsService.updatePost(id, postData);
        setSuccess('Post updated successfully!');
      } else {
        await postsService.createPost(postData);
        setSuccess('Post created successfully!');
        setTimeout(() => navigate('/admin'), 1500);
      }
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to save post');
    } finally {
      setLoading(false);
    }
  };

  if (loading && isEdit && !post.id) {
    return (
      <Box
        sx={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          height: '50vh',
        }}
      >
        <CircularProgress />
      </Box>
    );
  }

  return (
    <>
      <Helmet>
        <title>{isEdit ? 'Edit Post' : 'New Post'} - MyBlog Admin</title>
      </Helmet>

      <Container maxWidth="xl" sx={{ py: 4 }}>
        {/* Header with Stats */}
        <Paper sx={{ p: 3, mb: 3 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
            <Typography variant="h4" sx={{ fontWeight: 600 }}>
              {isEdit ? 'Edit Post' : 'Create New Post'}
            </Typography>
            
            <Stack direction="row" spacing={2}>
              <Chip
                icon={<WordCountIcon />}
                label={`${wordCount} words`}
                variant="outlined"
                size="small"
              />
              <Chip
                icon={<ScheduleIcon />}
                label={`${readingTime} min read`}
                variant="outlined"
                size="small"
              />
              {lastSaved && (
                <Chip
                  label={`Saved ${lastSaved.toLocaleTimeString()}`}
                  color="success"
                  variant="outlined"
                  size="small"
                />
              )}
            </Stack>
          </Box>

          {/* Auto-save toggle */}
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <FormControlLabel
              control={
                <Switch
                  checked={autoSave}
                  onChange={e => setAutoSave(e.target.checked)}
                  size="small"
                />
              }
              label="Auto-save"
            />
            
            {/* Editor mode tabs */}
            <Tabs
              value={activeTab}
              onChange={(e, newValue) => setActiveTab(newValue)}
              size="small"
            >
              <Tab icon={<EditIcon />} label="Edit" />
              <Tab icon={<VisibilityIcon />} label="Preview" />
            </Tabs>
          </Box>
        </Paper>

        {/* Main Editor Area */}
        <Paper sx={{ p: 0, overflow: 'hidden' }}>
          {error && (
            <Alert severity="error" sx={{ m: 3, mb: 0 }}>
              {error}
            </Alert>
          )}

          {success && (
            <Alert severity="success" sx={{ m: 3, mb: 0 }}>
              {success}
            </Alert>
          )}

          <Grid container sx={{ minHeight: '70vh' }}>
            {/* Left Column - Main Content */}
            <Grid item xs={12} lg={8} sx={{ p: 3, borderRight: { lg: 1 }, borderColor: 'divider' }}>
              <Stack spacing={3}>
                <TextField
                  fullWidth
                  label="Title"
                  value={post.title}
                  onChange={e => handleFieldChange('title', e.target.value)}
                  required
                  variant="outlined"
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      fontSize: '1.25rem',
                      fontWeight: 500,
                    },
                  }}
                />

                <TextField
                  fullWidth
                  label="Slug"
                  value={post.slug}
                  onChange={e => handleFieldChange('slug', e.target.value)}
                  required
                  helperText="URL-friendly version of the title"
                />

                <TextField
                  fullWidth
                  label="Excerpt"
                  value={post.excerpt}
                  onChange={e => handleFieldChange('excerpt', e.target.value)}
                  multiline
                  rows={2}
                  helperText="Brief description of the post"
                />

                <Divider />

                <Box>
                  <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
                    <AutoAwesomeIcon />
                    Content Editor
                  </Typography>
                  <Box sx={{ border: 1, borderColor: 'divider', borderRadius: 1 }}>
                    <MDEditor
                      value={post.content}
                      onChange={value => handleFieldChange('content', value || '')}
                      height={500}
                      preview={activeTab === 0 ? 'edit' : 'preview'}
                      data-color-mode="light"
                      visibleDragBar={false}
                    />
                  </Box>
                </Box>
              </Stack>
            </Grid>

            {/* Right Column - Settings */}
            <Grid item xs={12} lg={4} sx={{ p: 3, backgroundColor: 'grey.50' }}>
              <Stack spacing={3}>
                <Typography variant="h6" sx={{ fontWeight: 600 }}>
                  Post Settings
                </Typography>

                <FormControl fullWidth>
                  <InputLabel>Status</InputLabel>
                  <Select
                    value={post.status}
                    onChange={e => handleFieldChange('status', e.target.value)}
                    label="Status"
                  >
                    <MenuItem value="draft">
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Box sx={{ width: 8, height: 8, borderRadius: '50%', bgcolor: 'warning.main' }} />
                        Draft
                      </Box>
                    </MenuItem>
                    <MenuItem value="published">
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Box sx={{ width: 8, height: 8, borderRadius: '50%', bgcolor: 'success.main' }} />
                        Published
                      </Box>
                    </MenuItem>
                  </Select>
                </FormControl>

                <TextField
                  fullWidth
                  label="Category"
                  value={post.category}
                  onChange={e => handleFieldChange('category', e.target.value)}
                />

                <TextField
                  fullWidth
                  label="Tags"
                  value={post.tags}
                  onChange={e => handleFieldChange('tags', e.target.value)}
                  helperText="Comma-separated tags"
                />

                <Divider />

                <Box>
                  <Typography variant="body1" sx={{ mb: 2, fontWeight: 500 }}>
                    Featured Image
                  </Typography>
                  
                  {post.featured_img ? (
                    <Card sx={{ mb: 2 }}>
                      <CardMedia
                        component="img"
                        sx={{
                          height: 200,
                          objectFit: 'cover',
                        }}
                        image={post.featured_img}
                        alt="Featured image preview"
                      />
                      <Box
                        sx={{
                          p: 1,
                          display: 'flex',
                          justifyContent: 'space-between',
                          alignItems: 'center',
                        }}
                      >
                        <Typography variant="caption" color="text.secondary">
                          Current featured image
                        </Typography>
                        <IconButton
                          onClick={handleRemoveImage}
                          color="error"
                          size="small"
                        >
                          <DeleteIcon />
                        </IconButton>
                      </Box>
                    </Card>
                  ) : null}

                  <Stack spacing={2}>
                    <Box sx={{ display: 'flex', gap: 1 }}>
                      <input
                        ref={fileInputRef}
                        type="file"
                        accept="image/*"
                        onChange={handleImageUpload}
                        style={{ display: 'none' }}
                      />
                      <Button
                        variant="outlined"
                        startIcon={
                          uploading ? (
                            <CircularProgress size={16} />
                          ) : (
                            <UploadIcon />
                          )
                        }
                        onClick={() => fileInputRef.current?.click()}
                        disabled={uploading}
                        size="small"
                        fullWidth
                      >
                        {uploading ? 'Uploading...' : 'Upload Image'}
                      </Button>
                    </Box>

                    <TextField
                      fullWidth
                      label="Or enter image URL"
                      value={post.featured_img}
                      onChange={e =>
                        handleFieldChange('featured_img', e.target.value)
                      }
                      size="small"
                      helperText="You can upload an image or paste a URL"
                    />
                  </Stack>
                </Box>
              </Stack>
            </Grid>
          </Grid>

          {/* Action Bar */}
          <Box sx={{ p: 3, borderTop: 1, borderColor: 'divider', backgroundColor: 'background.paper' }}>
            <Stack direction="row" spacing={2} justifyContent="space-between" alignItems="center">
              <Box>
                {loading && <LinearProgress sx={{ width: 200, mr: 2 }} />}
              </Box>
              
              <Stack direction="row" spacing={2}>
                <Button variant="text" onClick={() => navigate('/admin')}>
                  Cancel
                </Button>
                <Button
                  variant="outlined"
                  onClick={() => handleSubmit('draft')}
                  disabled={loading}
                  startIcon={<SaveIcon />}
                >
                  Save as Draft
                </Button>
                <Button
                  variant="contained"
                  onClick={() => handleSubmit('published')}
                  disabled={loading}
                  startIcon={<PreviewIcon />}
                  size="large"
                >
                  {loading ? 'Publishing...' : 'Publish'}
                </Button>
              </Stack>
            </Stack>
          </Box>
        </Paper>

          {error && (
            <Alert severity="error" sx={{ mb: 3 }}>
              {error}
            </Alert>
          )}

          {success && (
            <Alert severity="success" sx={{ mb: 3 }}>
              {success}
            </Alert>
          )}

          <Grid container spacing={3}>
            <Grid item xs={12} md={8}>
              <TextField
                fullWidth
                label="Title"
                value={post.title}
                onChange={e => handleFieldChange('title', e.target.value)}
                sx={{ mb: 3 }}
                required
              />

              <TextField
                fullWidth
                label="Slug"
                value={post.slug}
                onChange={e => handleFieldChange('slug', e.target.value)}
                sx={{ mb: 3 }}
                helperText="URL-friendly version of the title"
                required
              />

              <TextField
                fullWidth
                label="Excerpt"
                value={post.excerpt}
                onChange={e => handleFieldChange('excerpt', e.target.value)}
                multiline
                rows={3}
                sx={{ mb: 3 }}
                helperText="Brief description of the post"
              />

              <Typography variant="h6" sx={{ mb: 2 }}>
                Content
              </Typography>
              <Box sx={{ mb: 3 }}>
                <MDEditor
                  value={post.content}
                  onChange={value => handleFieldChange('content', value || '')}
                  height={400}
                  preview="edit"
                  data-color-mode="light"
                />
              </Box>
            </Grid>

            <Grid item xs={12} md={4}>
              <FormControl fullWidth sx={{ mb: 3 }}>
                <InputLabel>Status</InputLabel>
                <Select
                  value={post.status}
                  onChange={e => handleFieldChange('status', e.target.value)}
                  label="Status"
                >
                  <MenuItem value="draft">Draft</MenuItem>
                  <MenuItem value="published">Published</MenuItem>
                </Select>
              </FormControl>

              <TextField
                fullWidth
                label="Category"
                value={post.category}
                onChange={e => handleFieldChange('category', e.target.value)}
                sx={{ mb: 3 }}
              />

              <TextField
                fullWidth
                label="Tags"
                value={post.tags}
                onChange={e => handleFieldChange('tags', e.target.value)}
                sx={{ mb: 3 }}
                helperText="Comma-separated tags"
              />

              <Box sx={{ mb: 3 }}>
                <Typography variant="body1" sx={{ mb: 2, fontWeight: 500 }}>
                  Featured Image
                </Typography>

                {post.featured_img ? (
                  <Card sx={{ mb: 2 }}>
                    <CardMedia
                      component="img"
                      sx={{
                        height: 200,
                        objectFit: 'cover',
                      }}
                      image={post.featured_img}
                      alt="Featured image preview"
                    />
                    <Box
                      sx={{
                        p: 1,
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                      }}
                    >
                      <Typography variant="caption" color="text.secondary">
                        Current featured image
                      </Typography>
                      <IconButton
                        onClick={handleRemoveImage}
                        color="error"
                        size="small"
                      >
                        <DeleteIcon />
                      </IconButton>
                    </Box>
                  </Card>
                ) : null}

                <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
                  <input
                    ref={fileInputRef}
                    type="file"
                    accept="image/*"
                    onChange={handleImageUpload}
                    style={{ display: 'none' }}
                  />
                  <Button
                    variant="outlined"
                    startIcon={
                      uploading ? (
                        <CircularProgress size={16} />
                      ) : (
                        <UploadIcon />
                      )
                    }
                    onClick={() => fileInputRef.current?.click()}
                    disabled={uploading}
                    size="small"
                  >
                    {uploading ? 'Uploading...' : 'Upload Image'}
                  </Button>
                </Box>

                <TextField
                  fullWidth
                  label="Or enter image URL"
                  value={post.featured_img}
                  onChange={e =>
                    handleFieldChange('featured_img', e.target.value)
                  }
                  size="small"
                  helperText="You can upload an image or paste a URL"
                />
              </Stack>
            </Box>
          </Stack>
        </Grid>
      </Grid>

      {/* Action Bar */}
      <Box sx={{ p: 3, borderTop: 1, borderColor: 'divider', backgroundColor: 'background.paper' }}>
        <Stack direction="row" spacing={2} justifyContent="space-between" alignItems="center">
          <Box>
            {loading && <LinearProgress sx={{ width: 200, mr: 2 }} />}
          </Box>
          
          <Stack direction="row" spacing={2}>
            <Button variant="text" onClick={() => navigate('/admin')}>
              Cancel
            </Button>
            <Button
              variant="outlined"
              onClick={() => handleSubmit('draft')}
              disabled={loading}
              startIcon={<SaveIcon />}
            >
              Save as Draft
            </Button>
            <Button
              variant="contained"
              onClick={() => handleSubmit('published')}
              disabled={loading}
              startIcon={<PreviewIcon />}
              size="large"
            >
              {loading ? 'Publishing...' : 'Publish'}
            </Button>
          </Stack>
        </Stack>
      </Box>
    </Paper>
      </Container>
    </>
  );
};

export default PostEditor;
